<?php

/**
 * Implements hook_ctools_plugin_directory() to let the system know
 * where our task and task_handler plugins are.
 */
function kernel_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'page_manager' && $plugin_type == 'task_handlers') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * @param $name
 * @return array
 */
function kernel_info($name = 'app') {
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['cache'] = &drupal_static(__FUNCTION__);
  }
  $cache = &$drupal_static_fast['cache'];

  if (!isset($cache)) {
    $cache = module_invoke_all('kernel_info');

    // Allow modules to alter the element type defaults.
    drupal_alter('kernel_info', $cache);
  }

  return isset($cache[$name]) ? $cache[$name] : array();
}

/**
 * @param string $name
 * @return \Symfony\Component\HttpKernel\KernelInterface
 */
function kernel_app($name = 'app') {
  static $kernel;
  $info = kernel_info($name);
  if ((!$kernel) && (class_exists($info['kernel class']))) {
    $loader = require_once $info['autoload'];
    if ($info['debug']) {
      \Symfony\Component\Debug\Debug::enable();
    }

    /** @var \Symfony\Component\HttpKernel\KernelInterface $kernel */
    $kernel = new $info['kernel class']($info['environment'], $info['debug']);

    foreach ($info['calls'] as $method => $args) {
      call_user_func_array(array($kernel, $method), $args);
    }
  }
  return $kernel;
}

/**
 * @param \Symfony\Component\HttpFoundation\Request $request
 * @return int|string
 */
function kernel_callback(\Symfony\Component\HttpFoundation\Request $request) {
  $kernel = kernel_app();
  $response = $kernel->handle($request);
  kernel_response($response);

  if ($response->isForbidden()) {
    return MENU_ACCESS_DENIED;
  }
  if ($response->isNotFound()) {
    return MENU_NOT_FOUND;
  }
  if ($response->isRedirection()) {
    drupal_goto(substr($response->headers->get('location'), strlen($GLOBALS['base_path'])));
  }
  return $response->getContent();
}

/**
 * Captures the response from the page callback for use in kernel_exit().
 */
function kernel_response(\Symfony\Component\HttpFoundation\Response $response = NULL) {
  $static = &drupal_static('kernel_response');
  if (isset($response)) {
    $static = $response;
  }
  else {
    return $static;
  }
}

/**
 * Implements hook_exit().
 */
function kernel_exit() {
  $kernel = kernel_app();
  $response = kernel_response();
  if ($response && is_a($kernel, 'Symfony\Component\HttpKernel\TerminableInterface')) {
    $router_item = menu_get_item();
    $request = $router_item['page_arguments'][0];
    /** @var \Symfony\Component\HttpKernel\TerminableInterface $kernel */
    $kernel->terminate($request, $response);
  }
}

/**
 * Implements hook_init().
 */
function kernel_init() {
  $kernel = kernel_app();
  if ($kernel) {
    $kernel->boot();
    $request = \Symfony\Component\HttpFoundation\Request::createFromGlobals();
    /** @var \Symfony\Bundle\FrameworkBundle\Routing\Router $router */
    $router = $kernel->getContainer()->get('router');
    try {
      $path = current_path();
      $router->match(base_path() . $path);
      $router_item = array(
        'path' => $path,
        'page_callback' => 'kernel_callback',
        'page_arguments' => array($request),
        'delivery_callback' => '',
        'tab_parent' => '',
        'tab_root' => $path,
        'title' => '',
        'type' => MENU_CALLBACK,
        'include_file' => '',
        'href' => $path,
        'tab_root_href' => $path,
        'tab_parent_href' => '',
        'access' => true,
        'original_map' => arg(NULL, $path),
        'map' => arg(NULL, $path),
      );

      // If the desire is to output a whole Symfony response, use:
      //

      // $router_item['page_callback'] = array($kernel, 'handle');
      // $router_item['page_arguments'] = array($request);
      // $router_item['delivery_callback'] = 'kernel_deliver_response';

      menu_set_item(NULL, $router_item);
    }
    catch (\Exception $e) {

    }
  }
}

/**
 * @see drupal_deliver_html_page
 */
function kernel_deliver_response(\Symfony\Component\HttpFoundation\Response $response) {
  $kernel = kernel_app();
  $router_item = menu_get_item();
  $request = $router_item['page_arguments'][0];

  $response->send();
  if (is_a($kernel, 'Symfony\Component\HttpKernel\TerminableInterface')) {
    /** @var \Symfony\Component\HttpKernel\TerminableInterface $kernel */
    $kernel->terminate($request, $response);
  }

  module_invoke_all('exit');

  // Commit the user session, if needed.
  drupal_session_commit();

  if (variable_get('cache', 0) && ($cache = drupal_page_set_cache())) {
    drupal_serve_page_from_cache($cache);
  }

  _registry_check_code(REGISTRY_WRITE_LOOKUP_CACHE);
  drupal_cache_system_paths();
  module_implements_write_cache();
  system_run_automated_cron();
}
